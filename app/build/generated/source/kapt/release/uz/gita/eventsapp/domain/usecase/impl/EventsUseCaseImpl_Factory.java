// Generated by Dagger (https://dagger.dev).
package uz.gita.eventsapp.domain.usecase.impl;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import uz.gita.eventsapp.domain.repository.AppRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class EventsUseCaseImpl_Factory implements Factory<EventsUseCaseImpl> {
  private final Provider<AppRepository> repositoryProvider;

  public EventsUseCaseImpl_Factory(Provider<AppRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public EventsUseCaseImpl get() {
    return newInstance(repositoryProvider.get());
  }

  public static EventsUseCaseImpl_Factory create(Provider<AppRepository> repositoryProvider) {
    return new EventsUseCaseImpl_Factory(repositoryProvider);
  }

  public static EventsUseCaseImpl newInstance(AppRepository repository) {
    return new EventsUseCaseImpl(repository);
  }
}
